%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
%  #false laziness w/menubar.html... shouldn't these just go in freeside.css?
<style type="text/css">
a.fsblackbutton {
         background-color:#333333;
         color: #ffffff;
         border:1px solid;
         border-top-color:#cccccc;
         border-left-color:#cccccc;
         border-right-color:#aaaaaa;
         border-bottom-color:#aaaaaa;
         /*font-weight:bold;*/
         /*padding-left:12px;
         padding-right:12px;*/
         padding-left:4px;
         padding-right:4px;
         font-size:16px;
         text-decoration:none;
         overflow:visible;
         filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr='#ff333333',EndColorStr='#ff666666')
}

a.fsblackbuttonselected,
a:link:hover.fsblackbutton,
a:visited:hover.fsblackbutton {
         background-color:#7e0079;
         color: #ffffff;
         border:1px solid;
         border-top-color:#cccccc;
         border-left-color:#cccccc;
         border-right-color:#aaaaaa;
         border-bottom-color:#aaaaaa;
         /*font-weight:bold;*/
         /*padding-left:12px;
         padding-right:12px;*/
         padding-left:4px;
         padding-right:4px;
         font-size:16px;
         text-decoration:none;
         overflow:visible;
         filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr='#ff330033',EndColorStr='#ff7e0079')
}

a.fsdarkbutton {
         background-color:#555555;
         color: #ffffff;
         border:1px solid;
         border-top-color:#cccccc;
         border-left-color:#cccccc;
         border-right-color:#aaaaaa;
         border-bottom-color:#aaaaaa;
         /*font-weight:bold;*/
         /*padding-left:12px;
         padding-right:12px;*/
         padding-left:4px;
         padding-right:4px;
         font-size:16px;
         text-decoration:none;
         overflow:visible;
         filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr='#ff555555',EndColorStr='#ff666666')
}

a.fsdarkbuttonselected,
a:link:hover.fsdarkbutton,
a:visited:hover.fsdarkbutton {
         background-color:#7e0079;
         color: #ffffff;
         border:1px solid;
         border-top-color:#cccccc;
         border-left-color:#cccccc;
         border-right-color:#aaaaaa;
         border-bottom-color:#aaaaaa;
         /*font-weight:bold;*/
         /*padding-left:12px;
         padding-right:12px;*/
         padding-left:4px;
         padding-right:4px;
         font-size:16px;
         text-decoration:none;
         overflow:visible;
         filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr='#ff330033',EndColorStr='#ff7e0079')
}
</style>
<% include('/elements/init_calendar.html') |n %>
<table border=0 cellspacing=0 cellpadding=0 width="100%" height="100%">
    <TR HEIGHT="100%">
      <TD valign="top">

% if (0) { ##FREESIDE MENUS INSTEAD## if ( $show_menu ) {
%# if ( $show_menu ) {
<div id="nav">
<& /Elements/Menu, toptabs => $toptabs, current_toptab => $current_toptab &>
</div>
% }

%#already shown  <h1><%$title%></h1>

% my $sep       = 0;
% my $postsep   = 0;
% my $count     = 0;
% my $class     = { };
% 

   <TABLE BGCOLOR="#000000" BORDER=0 CELLSPACING=0 CELLPADDING=0>
     <TR>

%#  <ul id="page-menu"<% (($actions && %$actions) || ($subactions && %$subactions)) && q[ class="actions-present"] | n %>>

% if ($page_tabs) {
    <TD><IMG SRC="<%$fsurl%>images/gray-black-side.png" WIDTH=13 HEIGHT=25></TD>
      <TD>
%     foreach my $tab (sort keys %{$page_tabs}) {
%         next if $tab =~ /^(?:current_toptab|this)$/;
%         $count++;
%
%         my $current = $page_tabs->{current_toptab} || "";
%         my $path    = $page_tabs->{$tab}->{'path'} || "";
%         
%         $path    =~ s#/index.html$##gi;
%         $current =~ s#/index.html$##gi;
%         
%         $sep = $toptabs->{$tab}->{'separator'} ? 1 : 0;
%
%         $class->{a} = $path eq $current ? ' class="selected"' : undef;
%
%         my @li;
%         push @li, 'first'
%                if $count == 1;
%
%         push @li, 'pre-separator'
%                if $sep;
%
%         push @li, 'post-separator'
%                if $postsep;
%
%         $class->{li} = join ' ', @li;
%     
%

%#    <li<% $class->{li} ? qq[ class="$class->{li}"] : ''|n %>><% $count > 1 && !$postsep && "&#183; "|n%><a href="<%$RT::WebPath%>/<%$page_tabs->{$tab}->{'path'}%>"<%$class->{a}|n%><% $class->{a} ? ' name="focus"' : ''|n %>><% $page_tabs->{$tab}->{'title'} %></a></li>

%         $class->{a} = $path eq $current ? ' class="fsblackbuttonselected"' : ' class="fsblackbutton"';
    <a href="<%$RT::WebPath%>/<%$page_tabs->{$tab}->{'path'}%>"<%$class->{a}|n%><% $class->{a} =~ 'selected' ? ' name="focus"' : ''|n %>><% $page_tabs->{$tab}->{'title'} %></a>

%     }
      </TD>
%# } else {
%#&nbsp;
% }

% if (($actions && %$actions) || ($subactions && %$subactions)) {
  <TD><IMG SRC="<%$fsurl%>images/<% $page_tabs ? 'black-gray' : 'gray-black' %>-side.png" WIDTH=13 HEIGHT=25></TD>
% if ( $page_tabs ) {
  <TD BGCOLOR="#333333">&nbsp;&nbsp;</TD>
% }
  <TD BGCOLOR="#333333">
% $sep       = 0;
% $postsep   = 0;
% $count     = 0;
% $class     = { };
%
% for my $type ($actions, $subactions) {
%
% if ($type && %$type) {
%     foreach my $action (sort keys %{$type}) {
%         $count++;
%
%         $sep = $type->{$action}->{'separator'} ? 1 : 0;
%
%         my @li;
%         push @li, 'first'
%                if $count == 1;
%
%         push @li, 'pre-separator'
%                if $sep;
%
%         push @li, 'post-separator'
%                if $postsep;
%
%         $class->{li} = join ' ', @li;
%

%#    <li<% $class->{li} ? qq[ class="$class->{li}"] : ''|n %>><% $count > 1 && !$postsep && qq[<span class="bullet">&#183; </span>]|n%>

%         #$class->{a} = $path eq $current ? ' class="fsblackbuttonselected"' : ' class="fsblackbutton"';
%         $type->{$action}->{class} ||= 'fsdarkbutton';

%         if ($type->{"$action"}->{'html'}) {
      <% $type->{"$action"}->{'html'} | n %>
%         } else {
      <a href="<%$RT::WebPath%>/<%$type->{$action}->{'path'}%>"<% $type->{$action}->{class} && ' class="'.$type->{$action}->{class}.'"' |n %><% $type->{$action}->{id} && ' id="'.$type->{$action}->{id}.'"' |n %>><%$type->{$action}->{'title'}%></a>
%         }

%     }
% }
% }

  </TD>

% }

    <TD><IMG SRC="<%$fsurl%>images/black-gray-side.png" WIDTH=13 HEIGHT=25></TD>
  </TR>
</TABLE>


<div id="body">
<& /Elements/Callback, _CallbackName => 'BeforeBody',  %ARGS &>
%$m->flush_buffer(); # we've got the page laid out, let's flush the buffer;

<%INIT>
  foreach my $tab (sort keys %{$toptabs}) {
    if ($current_toptab && $toptabs->{$tab}->{'path'} eq $current_toptab) {
      $toptabs->{$tab}->{"subtabs"} = $tabs;
      $toptabs->{$tab}->{"current_subtab"} = $current_tab;
    }
  }

if (! defined($AppName)) {
  $AppName = loc("RT for [_1]", $RT::rtname);
}

my ($menu_depth, $almost_last, $page_tabs);

if ($RT::WebDefaultStylesheet ne '3.4-compat') {
    ($menu_depth, $almost_last) = @{$m->comp('.menu_recurse', data => $toptabs)};

    if (defined $almost_last->{subtabs} and %{$almost_last->{subtabs}}) {
        $page_tabs = {
            current_toptab => $almost_last->{current_subtab},
            %{$almost_last->{subtabs}},
        };

        delete $almost_last->{subtabs};
        delete $almost_last->{current_subtab};
    }
}
</%INIT>

%# There's probably a better way to do this that involves three times as
%# much work and redoing the whole menu/tab system... which would seem a
%# bit out of scope.
%#
%# This function recurses through the menu and returns the second to
%# last menu, that is, the menu holding the last reference to
%# and submenu.  It also returns the number of menu levels minus
%# the last submenu.
<%def .menu_recurse>
  <%args>
      $data   => { }
      $pdata  => { }
      $ppdata => { }
      $level  => 0
  </%args>
  <%init>
      for my $key (keys %$data) {
          return $m->comp('.menu_recurse', data   => $data->{$key}->{subtabs},
                                           pdata  => $data->{$key},
                                           ppdata => $pdata,
                                           level  => $level+1)
              if ref($data->{$key}) eq 'HASH'
                 and defined $data->{$key}->{subtabs}
                 and %{$data->{$key}->{subtabs}};
      }
      $ppdata->{last_system_menu_level}++;
      return [$level, $pdata];
  </%init>
</%def>

<%ARGS>
$current_toptab => undef
$current_tab => undef
$toptabs => undef
$topactions => undef
$tabs => undef
$actions => undef
$subactions => undef
$title => $m->callers(-1)->path
$AppName => undef
$show_menu => 1
</%ARGS>
