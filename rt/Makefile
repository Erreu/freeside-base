# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2011 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
#
# DO NOT HAND-EDIT the file named 'Makefile'. This file is autogenerated.
# Have a look at "configure" and "Makefile.in" instead
#


PERL			=	/usr/bin/perl
INSTALL			=	/usr/bin/install -c

RT_LAYOUT		=	Freeside

CONFIG_FILE_PATH	=	/opt/rt3/etc
CONFIG_FILE		=	$(CONFIG_FILE_PATH)/RT_Config.pm
SITE_CONFIG_FILE	=	$(CONFIG_FILE_PATH)/RT_SiteConfig.pm


RT_VERSION_MAJOR	=	3
RT_VERSION_MINOR	=	8
RT_VERSION_PATCH	=	9

RT_VERSION		=	$(RT_VERSION_MAJOR).$(RT_VERSION_MINOR).$(RT_VERSION_PATCH)
TAG 			=	rt-$(RT_VERSION_MAJOR)-$(RT_VERSION_MINOR)-$(RT_VERSION_PATCH)


# This is the group that all of the installed files will be chgrp'ed to.
RTGROUP			=	freeside


# User which should own rt binaries.
BIN_OWNER		=	root

# User that should own all of RT's libraries, generally root.
LIBS_OWNER 		=	root

# Group that should own all of RT's libraries, generally root.
LIBS_GROUP		=	bin

WEB_USER		=	freeside
WEB_GROUP		=	freeside


APACHECTL		=	

# {{{ Files and directories 

# DESTDIR allows you to specify that RT be installed somewhere other than
# where it will eventually reside. DESTDIR _must_ have a trailing slash
# if it's defined.

DESTDIR			=	



RT_PATH			=	/opt/rt3
RT_ETC_PATH		=	/opt/rt3/etc
RT_BIN_PATH		=	/opt/rt3/bin
RT_SBIN_PATH		=	/opt/rt3/sbin
RT_LIB_PATH		=	/opt/rt3/lib
RT_MAN_PATH		=	/opt/rt3/man
RT_VAR_PATH		=	/opt/rt3/var
RT_DOC_PATH		=	/opt/rt3/share/doc
RT_FONT_PATH		=	/opt/rt3/share/fonts
RT_LOCAL_PATH		=	/opt/rt3/local
LOCAL_PLUGIN_PATH	=	/opt/rt3/local/plugins
LOCAL_ETC_PATH		=	/opt/rt3/local/etc
LOCAL_LIB_PATH		=	/opt/rt3/local/lib
LOCAL_LEXICON_PATH	=	/opt/rt3/local/po
MASON_HTML_PATH		=	/var/www/freeside/rt
MASON_LOCAL_HTML_PATH	=	/opt/rt3/local/html
MASON_DATA_PATH		=	/usr/local/etc/freeside/masondata
MASON_SESSION_PATH	=	/opt/rt3/var/session_data
RT_LOG_PATH		=       /opt/rt3/var/log

# RT_READABLE_DIR_MODE is the mode of directories that are generally meant
# to be accessable
RT_READABLE_DIR_MODE	=	0755




# {{{ all these define the places that RT's binaries should get installed

# RT_MODPERL_HANDLER is the mason handler script for mod_perl
RT_MODPERL_HANDLER	=	webmux.pl
# RT_STANDALONE_SERVER is a stand-alone HTTP server
RT_STANDALONE_SERVER	=	standalone_httpd
# RT_SPEEDYCGI_HANDLER is the mason handler script for SpeedyCGI
RT_SPEEDYCGI_HANDLER	=	mason_handler.scgi
# RT_FASTCGI_HANDLER is the mason handler script for FastCGI
RT_FASTCGI_HANDLER	=	mason_handler.fcgi
# RT_FASTCGI_SERVER is the FastCGI server
RT_FASTCGI_SERVER	=	fastcgi_server
# RT_WIN32_FASTCGI_HANDLER is the mason handler script for FastCGI
RT_WIN32_FASTCGI_HANDLER	=	mason_handler.svc
# RT's CLI
RT_CLI_BIN		=	rt
# RT's mail gateway
RT_MAILGATE_BIN		=	rt-mailgate
# RT's cron tool
RT_CRON_BIN		=	rt-crontool

# }}}


BINARIES		=	$(RT_MODPERL_HANDLER) \
				$(RT_MAILGATE_BIN) \
				$(RT_CLI_BIN) \
				$(RT_CRON_BIN) \
				$(RT_STANDALONE_SERVER) \
				$(RT_SPEEDYCGI_HANDLER) \
				$(RT_FASTCGI_HANDLER) \
				$(RT_FASTCGI_SERVER) \
				$(RT_WIN32_FASTCGI_HANDLER)





SYSTEM_BINARIES		=	rt-attributes-viewer \
				rt-dump-database \
				rt-setup-database \
				rt-email-digest \
				rt-email-dashboards \
				rt-email-group-admin \
				rt-server \
				rt-session-viewer \
				rt-test-dependencies \
				rt-clean-sessions \
				rt-shredder \
				rt-validator


ETC_FILES		=	acl.Informix \
				acl.Pg \
				acl.Oracle \
				acl.mysql \
				acl.Sybase \
				schema.Informix \
				schema.Pg \
				schema.Oracle \
				schema.mysql-4.0 \
				schema.mysql-4.1 \
				schema.Sybase \
				schema.SQLite \
				initialdata

# }}}

# {{{ Web frontend

WEB_HANDLER		=	modperl2

# }}}

# {{{ Database setup

#
# DB_TYPE defines what sort of database RT trys to talk to
# "mysql" is known to work.
# "Pg" is known to work
# "Informix" is known to work

DB_TYPE			=	Pg

# Set DBA to the name of a unix account with the proper permissions and 
# environment to run your commandline SQL sbin

# Set DB_DBA to the name of a DB user with permission to create new databases 

# For mysql, you probably want 'root'
# For Pg, you probably want 'postgres' 
# For Oracle, you want 'system'
# For Informix, you want 'informix'

DB_DBA			=	freeside

DB_HOST			=	localhost

# If you're not running your database server on its default port, 
# specifiy the port the database server is running on below.
# It's generally safe to leave this blank 

DB_PORT			=	




#
# Set this to the canonical name of the interface RT will be talking to the 
# database on.  If you said that the RT_DB_HOST above was "localhost," this 
# should be too. This value will be used to grant rt access to the database.
# If you want to access the RT database from multiple hosts, you'll need
# to grant those database rights by hand.
#

DB_RT_HOST		=	localhost

# set this to the name you want to give to the RT database in 
# your database server. For Oracle, this should be the name of your sid

DB_DATABASE		=	freeside
DB_RT_USER		=	freeside
DB_RT_PASS		=	

# }}}


TEST_FILES = t/*.t t/*/*.t
TEST_VERBOSE = 0


####################################################################

all: default

default:
	@echo "Please read RT's README before beginning your installation."



instruct:
	@echo "Congratulations. RT is now installed."
	@echo ""
	@echo ""
	@echo "You must now configure RT by editing $(SITE_CONFIG_FILE)."
	@echo ""
	@echo "(You will definitely need to set RT's database password in "
	@echo "$(SITE_CONFIG_FILE) before continuing. Not doing so could be "
	@echo "very dangerous.  Note that you do not have to manually add a "
	@echo "database user or set up a database for RT.  These actions will be "
	@echo "taken care of in the next step.)"
	@echo ""
	@echo "After that, you need to initialize RT's database by running" 
	@echo " 'make initialize-database'"


upgrade-instruct: 
	@echo "Congratulations. RT has been upgraded. You should now check over"
	@echo "$(CONFIG_FILE) for any necessary site customization. Additionally,"
	@echo "you should update RT's system database objects by running "
	@echo "    $(RT_SBIN_PATH)/rt-setup-database --dba $(DB_DBA) --prompt-for-dba-password --action upgrade"


upgrade: testdeps config-install dirs files-install fixperms upgrade-instruct

upgrade-noclobber: config-install dirs libs-install html-install bin-install local-install doc-install font-install fixperms


# {{{ dependencies

my_with_web_handlers= $(shell $(PERL) -e 'print join " ", map "--with-$$_", grep defined && length, split /,/, "$(WEB_HANDLER)"')
testdeps:
	$(PERL) ./sbin/rt-test-dependencies --verbose --with-$(DB_TYPE) $(my_with_web_handlers)

depends: fixdeps

fixdeps:
	$(PERL) ./sbin/rt-test-dependencies --verbose --install --with-$(DB_TYPE) $(my_with_web_handlers)

#}}}

# {{{ fixperms
fixperms:
	# Make the libraries readable
	chmod $(RT_READABLE_DIR_MODE) $(DESTDIR)$(RT_PATH)
	chown -R $(LIBS_OWNER) $(DESTDIR)$(RT_LIB_PATH)
	chgrp -R $(LIBS_GROUP) $(DESTDIR)$(RT_LIB_PATH)
	chmod -R  u+rwX,go-w,go+rX $(DESTDIR)$(RT_LIB_PATH)


	chmod $(RT_READABLE_DIR_MODE) $(DESTDIR)$(RT_BIN_PATH)

	chmod 0755 $(DESTDIR)$(RT_ETC_PATH)
	cd $(DESTDIR)$(RT_ETC_PATH) && chmod 0400 $(ETC_FILES) || true

	#TODO: the config file should probably be able to have its
	# owner set separately from the binaries.
	chown -R $(BIN_OWNER) $(DESTDIR)$(RT_ETC_PATH)
	chgrp -R $(RTGROUP) $(DESTDIR)$(RT_ETC_PATH)

	chmod 0440 $(DESTDIR)$(CONFIG_FILE)
	chmod 0640 $(DESTDIR)$(SITE_CONFIG_FILE)

	# Make the system binaries
	cd $(DESTDIR)$(RT_BIN_PATH) && ( chmod 0755 $(BINARIES) ; chown $(BIN_OWNER) $(BINARIES);  chgrp $(RTGROUP) $(BINARIES))

	# Make the system binaries executable also
	cd $(DESTDIR)$(RT_SBIN_PATH) && ( chmod 0755 $(SYSTEM_BINARIES) ; chown $(BIN_OWNER) $(SYSTEM_BINARIES);  chgrp $(RTGROUP) $(SYSTEM_BINARIES))

	# Make the web ui readable by all. 
	chmod -R  u+rwX,go-w,go+rX 	$(DESTDIR)$(MASON_HTML_PATH) \
					$(DESTDIR)$(MASON_LOCAL_HTML_PATH) \
					$(DESTDIR)$(LOCAL_LEXICON_PATH)
	chown -R $(LIBS_OWNER) 	$(DESTDIR)$(MASON_HTML_PATH) \
				$(DESTDIR)$(MASON_LOCAL_HTML_PATH)
	chgrp -R $(LIBS_GROUP) 	$(DESTDIR)$(MASON_HTML_PATH) \
				$(DESTDIR)$(MASON_LOCAL_HTML_PATH)

	# Make the web ui's data dir writable
	chmod 0770  	$(DESTDIR)$(MASON_DATA_PATH) \
			$(DESTDIR)$(MASON_SESSION_PATH)
	chown -R $(WEB_USER) 	$(DESTDIR)$(MASON_DATA_PATH) \
				$(DESTDIR)$(MASON_SESSION_PATH)
	chgrp -R $(WEB_GROUP) 	$(DESTDIR)$(MASON_DATA_PATH) \
				$(DESTDIR)$(MASON_SESSION_PATH)
# }}}

# {{{ dirs
dirs:
	$(INSTALL) -m 0755 -d $(DESTDIR)$(RT_LOG_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(RT_FONT_PATH)
	$(INSTALL) -m 0770 -d $(DESTDIR)$(MASON_DATA_PATH)
	$(INSTALL) -m 0770 -d $(DESTDIR)$(MASON_DATA_PATH)/cache
	$(INSTALL) -m 0770 -d $(DESTDIR)$(MASON_DATA_PATH)/etc
	$(INSTALL) -m 0770 -d $(DESTDIR)$(MASON_DATA_PATH)/obj
	$(INSTALL) -m 0770 -d $(DESTDIR)$(MASON_SESSION_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(MASON_HTML_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(MASON_LOCAL_HTML_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(LOCAL_ETC_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(LOCAL_LIB_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(LOCAL_PLUGIN_PATH)
	$(INSTALL) -m 0755 -d $(DESTDIR)$(LOCAL_LEXICON_PATH)
# }}}

install: testdeps config-install dirs files-install fixperms instruct

files-install: libs-install etc-install config-install bin-install sbin-install html-install local-install doc-install font-install

config-install:
	$(INSTALL) -m 0755 -o $(BIN_OWNER) -g $(RTGROUP) -d $(DESTDIR)$(CONFIG_FILE_PATH)
	-$(INSTALL) -m 0440 -o $(BIN_OWNER) -g $(RTGROUP)  etc/RT_Config.pm $(DESTDIR)$(CONFIG_FILE)
	[ -f $(DESTDIR)$(SITE_CONFIG_FILE) ] || $(INSTALL) -m 0640 -o $(BIN_OWNER) -g $(RTGROUP) etc/RT_SiteConfig.pm $(DESTDIR)$(SITE_CONFIG_FILE) 
	@echo "Installed configuration. About to install RT in  $(RT_PATH)"

test: 
	$(PERL) "-MExtUtils::Command::MM" -e "test_harness($(TEST_VERBOSE), 'lib')" $(TEST_FILES)

parallel-test: test-parallel

test-parallel: 
	RT_TEST_PARALLEL=1 HARNESS_OPTIONS="j4" $(PERL) "-MExtUtils::Command::MM" -e "test_harness($(TEST_VERBOSE), 'lib')" $(TEST_FILES)

regression-install: config-install
	$(PERL) -pi -e 's/Set\(\$$DatabaseName.*\);/Set\(\$$DatabaseName, "rt3regression"\);/' $(DESTDIR)$(CONFIG_FILE)

# {{{ database-installation

regression-reset-db: force-dropdb
	$(PERL) -I$(LOCAL_LIB_PATH) -I$(RT_LIB_PATH) sbin/rt-setup-database --action init --dba $(DB_DBA) --dba-password ''

initdb :: initialize-database

initialize-database: 
	$(PERL) -I$(LOCAL_LIB_PATH) -I$(RT_LIB_PATH) sbin/rt-setup-database --action init --dba $(DB_DBA) --prompt-for-dba-password

dropdb: 
	$(PERL) -I$(LOCAL_LIB_PATH) -I$(RT_LIB_PATH) sbin/rt-setup-database --action drop --dba $(DB_DBA) --prompt-for-dba-password

force-dropdb: 
	$(PERL) -I$(LOCAL_LIB_PATH) -I$(RT_LIB_PATH) sbin/rt-setup-database --action drop --dba $(DB_DBA) --dba-password '' --force

# }}}

# {{{ libs-install
libs-install: 
	[ -d $(DESTDIR)$(RT_LIB_PATH) ] || $(INSTALL) -m 0755 -d $(DESTDIR)$(RT_LIB_PATH)
	-( cd lib && find . -type d -print ) | while read dir ; do \
	    $(INSTALL) -m 0755 -d "$(DESTDIR)$(RT_LIB_PATH)/$$dir" ; \
	done
	-( cd lib && find . -type f -print ) | while read file ; do \
	     $(INSTALL) -m 0644 "lib/$$file" "$(DESTDIR)$(RT_LIB_PATH)/$$file" ; \
	done
# }}}

# {{{ html-install
html-install:
	[ -d $(DESTDIR)$(MASON_HTML_PATH) ] || $(INSTALL) -m 0755 -d $(DESTDIR)$(MASON_HTML_PATH)
	-( cd share/html && find . -type d -print ) | while read dir ; do \
	    $(INSTALL) -m 0755 -d "$(DESTDIR)$(MASON_HTML_PATH)/$$dir" ; \
	done
	-( cd share/html && find . -type f -print ) | while read file ; do \
	    $(INSTALL) -m 0644 "share/html/$$file" "$(DESTDIR)$(MASON_HTML_PATH)/$$file" ; \
	done
# }}}

# {{{ font-install
font-install:
	[ -d $(DESTDIR)$(RT_FONT_PATH) ] || $(INSTALL) -m 0755 -d $(DESTDIR)$(RT_FONT_PATH)
	-( cd share/fonts && find . -type f -print ) | while read file ; do \
	    $(INSTALL) -m 0644 "share/fonts/$$file" "$(DESTDIR)$(RT_FONT_PATH)/$$file" ; \
	done
# }}}

# {{{ doc-install
doc-install:
	# RT 3.0.0 - RT 3.0.2 would accidentally create a file instead of a dir
	-[ -f $(DESTDIR)$(RT_DOC_PATH) ] && rm $(DESTDIR)$(RT_DOC_PATH) 
	[ -d $(DESTDIR)$(RT_DOC_PATH) ] || $(INSTALL) -m 0755 -d $(DESTDIR)$(RT_DOC_PATH)
	-$(INSTALL) -m 0644 ./README $(DESTDIR)$(RT_DOC_PATH)/
# }}}

# {{{ etc-install

etc-install:
	[ -d $(DESTDIR)$(RT_ETC_PATH) ] || $(INSTALL) -m 0755 -d $(DESTDIR)$(RT_ETC_PATH)
	for file in $(ETC_FILES) ; do \
	    $(INSTALL) -m 0644 "etc/$$file" "$(DESTDIR)$(RT_ETC_PATH)/" ; \
	done
# }}}

# {{{ sbin-install

sbin-install:
	$(INSTALL) -m 0755 -d $(DESTDIR)$(RT_SBIN_PATH)
	for file in $(SYSTEM_BINARIES) ; do \
	    $(INSTALL) -o $(BIN_OWNER) -g $(RTGROUP) -m 0755 "sbin/$$file" "$(DESTDIR)$(RT_SBIN_PATH)/" ; \
	done

# }}}

# {{{ bin-install

bin-install:
	$(INSTALL) -m 0755 -d $(DESTDIR)$(RT_BIN_PATH)
	for file in $(BINARIES) ; do \
	    $(INSTALL) -o $(BIN_OWNER) -g $(RTGROUP) -m 0755 "bin/$$file" "$(DESTDIR)$(RT_BIN_PATH)/" ; \
	done

# {{{ local-install
local-install:
	-( cd local/html && find . -type d -print ) | while read dir ; do \
	    $(INSTALL) -m 0755 -d "$(DESTDIR)$(MASON_LOCAL_HTML_PATH)/$$dir" ; \
	done
	-( cd local/html && find . -type f -print ) | while read file ; do \
	    $(INSTALL) -m 0644 "local/html/$$file" "$(DESTDIR)$(MASON_LOCAL_HTML_PATH)/$$file" ; \
	done
	-( cd local/po && find . -type d -print ) | while read dir ; do \
	    $(INSTALL) -m 0755 -d "$(DESTDIR)$(LOCAL_LEXICON_PATH)/$$dir" ; \
	done
	-( cd local/po && find . -type f -print ) | while read file ; do \
	    $(INSTALL) -m 0644 "local/po/$$file" "$(DESTDIR)$(LOCAL_LEXICON_PATH)/$$file" ; \
	done
	-( cd local/etc && find . -type d -print ) | while read dir ; do \
	    $(INSTALL) -m 0755 -d "$(DESTDIR)$(LOCAL_ETC_PATH)/$$dir" ; \
	done
	-( cd local/etc && find . -type f -print ) | while read file ; do \
	    $(INSTALL) -m 0644 "etc/$$file" "$(DESTDIR)$(LOCAL_ETC_PATH)/$$file" ; \
	done
# }}}

# {{{ Best Practical Build targets -- no user servicable parts inside

regenerate-catalogs:
	$(PERL) sbin/extract-message-catalog

license-tag:
	$(PERL) sbin/license_tag

factory: initialize-database
	cd lib; $(PERL) ../sbin/factory  $(DB_DATABASE) RT

reconfigure:
	aclocal -I m4
	autoconf
	chmod 755 ./configure
	./configure

start-httpd:
	$(PERL) bin/standalone_httpd &

start-server:
	$(PERL) sbin/rt-server &

apachectl:
	$(APACHECTL) stop
	sleep 10
	$(APACHECTL) start
	sleep 5

SNAPSHOT=$(shell git describe --tags)
snapshot:
	git archive --prefix "$(SNAPSHOT)/"  HEAD | tar -xf -
	( cd $(SNAPSHOT) && autoconf && ./configure )
	tar -czf "$(SNAPSHOT).tar.gz" "$(SNAPSHOT)/"
	rm -fr "$(SNAPSHOT)/"

# }}}
