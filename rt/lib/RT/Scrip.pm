# BEGIN LICENSE BLOCK
# 
# Copyright (c) 1996-2003 Jesse Vincent <jesse@bestpractical.com>
# 
# (Except where explictly superceded by other copyright notices)
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# Unless otherwise specified, all modifications, corrections or
# extensions to this work which alter its source code become the
# property of Best Practical Solutions, LLC when submitted for
# inclusion in the work.
# 
# 
# END LICENSE BLOCK
# Autogenerated by DBIx::SearchBuilder factory (by <jesse@bestpractical.com>)
# WARNING: THIS FILE IS AUTOGENERATED. ALL CHANGES TO THIS FILE WILL BE LOST.  
# 
# !! DO NOT EDIT THIS FILE !!
#

use strict;


=head1 NAME

RT::Scrip


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::Scrip;
use RT::Record; 
use RT::Queue;
use RT::Template;
use RT::ScripCondition;
use RT::ScripAction;


use vars qw( @ISA );
@ISA= qw( RT::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Scrips');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  varchar(255) 'Description'.
  int(11) 'ScripCondition'.
  int(11) 'ScripAction'.
  text 'ConditionRules'.
  text 'ActionRules'.
  text 'CustomIsApplicableCode'.
  text 'CustomPrepareCode'.
  text 'CustomCommitCode'.
  varchar(32) 'Stage'.
  int(11) 'Queue'.
  int(11) 'Template'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                Description => '',
                ScripCondition => '0',
                ScripAction => '0',
                ConditionRules => '',
                ActionRules => '',
                CustomIsApplicableCode => '',
                CustomPrepareCode => '',
                CustomCommitCode => '',
                Stage => '',
                Queue => '0',
                Template => '0',

		  @_);
    $self->SUPER::Create(
                         Description => $args{'Description'},
                         ScripCondition => $args{'ScripCondition'},
                         ScripAction => $args{'ScripAction'},
                         ConditionRules => $args{'ConditionRules'},
                         ActionRules => $args{'ActionRules'},
                         CustomIsApplicableCode => $args{'CustomIsApplicableCode'},
                         CustomPrepareCode => $args{'CustomPrepareCode'},
                         CustomCommitCode => $args{'CustomCommitCode'},
                         Stage => $args{'Stage'},
                         Queue => $args{'Queue'},
                         Template => $args{'Template'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=cut


=item Description

Returns the current value of Description. 
(In the database, Description is stored as varchar(255).)



=item SetDescription VALUE


Set Description to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Description will be stored as a varchar(255).)


=cut


=item ScripCondition

Returns the current value of ScripCondition. 
(In the database, ScripCondition is stored as int(11).)



=item SetScripCondition VALUE


Set ScripCondition to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ScripCondition will be stored as a int(11).)


=cut


=item ScripConditionObj

Returns the ScripCondition Object which has the id returned by ScripCondition


=cut

sub ScripConditionObj {
	my $self = shift;
	my $ScripCondition =  RT::ScripCondition->new($self->CurrentUser);
	$ScripCondition->Load($self->__Value('ScripCondition'));
	return($ScripCondition);
}

=item ScripAction

Returns the current value of ScripAction. 
(In the database, ScripAction is stored as int(11).)



=item SetScripAction VALUE


Set ScripAction to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ScripAction will be stored as a int(11).)


=cut


=item ScripActionObj

Returns the ScripAction Object which has the id returned by ScripAction


=cut

sub ScripActionObj {
	my $self = shift;
	my $ScripAction =  RT::ScripAction->new($self->CurrentUser);
	$ScripAction->Load($self->__Value('ScripAction'));
	return($ScripAction);
}

=item ConditionRules

Returns the current value of ConditionRules. 
(In the database, ConditionRules is stored as text.)



=item SetConditionRules VALUE


Set ConditionRules to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ConditionRules will be stored as a text.)


=cut


=item ActionRules

Returns the current value of ActionRules. 
(In the database, ActionRules is stored as text.)



=item SetActionRules VALUE


Set ActionRules to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ActionRules will be stored as a text.)


=cut


=item CustomIsApplicableCode

Returns the current value of CustomIsApplicableCode. 
(In the database, CustomIsApplicableCode is stored as text.)



=item SetCustomIsApplicableCode VALUE


Set CustomIsApplicableCode to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CustomIsApplicableCode will be stored as a text.)


=cut


=item CustomPrepareCode

Returns the current value of CustomPrepareCode. 
(In the database, CustomPrepareCode is stored as text.)



=item SetCustomPrepareCode VALUE


Set CustomPrepareCode to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CustomPrepareCode will be stored as a text.)


=cut


=item CustomCommitCode

Returns the current value of CustomCommitCode. 
(In the database, CustomCommitCode is stored as text.)



=item SetCustomCommitCode VALUE


Set CustomCommitCode to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CustomCommitCode will be stored as a text.)


=cut


=item Stage

Returns the current value of Stage. 
(In the database, Stage is stored as varchar(32).)



=item SetStage VALUE


Set Stage to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Stage will be stored as a varchar(32).)


=cut


=item Queue

Returns the current value of Queue. 
(In the database, Queue is stored as int(11).)



=item SetQueue VALUE


Set Queue to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Queue will be stored as a int(11).)


=cut


=item QueueObj

Returns the Queue Object which has the id returned by Queue


=cut

sub QueueObj {
	my $self = shift;
	my $Queue =  RT::Queue->new($self->CurrentUser);
	$Queue->Load($self->__Value('Queue'));
	return($Queue);
}

=item Template

Returns the current value of Template. 
(In the database, Template is stored as int(11).)



=item SetTemplate VALUE


Set Template to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Template will be stored as a int(11).)


=cut


=item TemplateObj

Returns the Template Object which has the id returned by Template


=cut

sub TemplateObj {
	my $self = shift;
	my $Template =  RT::Template->new($self->CurrentUser);
	$Template->Load($self->__Value('Template'));
	return($Template);
}

=item Creator

Returns the current value of Creator. 
(In the database, Creator is stored as int(11).)


=cut


=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=cut


=item LastUpdatedBy

Returns the current value of LastUpdatedBy. 
(In the database, LastUpdatedBy is stored as int(11).)


=cut


=item LastUpdated

Returns the current value of LastUpdated. 
(In the database, LastUpdated is stored as datetime.)


=cut



sub _ClassAccessible {
    {
     
        id =>
		{read => 1, type => 'int(11)', default => ''},
        Description => 
		{read => 1, write => 1, type => 'varchar(255)', default => ''},
        ScripCondition => 
		{read => 1, write => 1, type => 'int(11)', default => '0'},
        ScripAction => 
		{read => 1, write => 1, type => 'int(11)', default => '0'},
        ConditionRules => 
		{read => 1, write => 1, type => 'text', default => ''},
        ActionRules => 
		{read => 1, write => 1, type => 'text', default => ''},
        CustomIsApplicableCode => 
		{read => 1, write => 1, type => 'text', default => ''},
        CustomPrepareCode => 
		{read => 1, write => 1, type => 'text', default => ''},
        CustomCommitCode => 
		{read => 1, write => 1, type => 'text', default => ''},
        Stage => 
		{read => 1, write => 1, type => 'varchar(32)', default => ''},
        Queue => 
		{read => 1, write => 1, type => 'int(11)', default => '0'},
        Template => 
		{read => 1, write => 1, type => 'int(11)', default => '0'},
        Creator => 
		{read => 1, auto => 1, type => 'int(11)', default => '0'},
        Created => 
		{read => 1, auto => 1, type => 'datetime', default => ''},
        LastUpdatedBy => 
		{read => 1, auto => 1, type => 'int(11)', default => '0'},
        LastUpdated => 
		{read => 1, auto => 1, type => 'datetime', default => ''},

 }
};


        eval "require RT::Scrip_Overlay";
        if ($@ && $@ !~ qr{^Can't locate RT/Scrip_Overlay.pm}) {
            die $@;
        };

        eval "require RT::Scrip_Vendor";
        if ($@ && $@ !~ qr{^Can't locate RT/Scrip_Vendor.pm}) {
            die $@;
        };

        eval "require RT::Scrip_Local";
        if ($@ && $@ !~ qr{^Can't locate RT/Scrip_Local.pm}) {
            die $@;
        };




=head1 SEE ALSO

This class allows "overlay" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
_Vendor is for 3rd-party vendor add-ons, while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

RT::Scrip_Overlay, RT::Scrip_Vendor, RT::Scrip_Local

=cut


1;
