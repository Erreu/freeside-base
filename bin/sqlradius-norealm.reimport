#!/usr/bin/perl -Tw

use strict;
use vars qw(%part_svc);
#use Date::Parse;
use DBI;
use Term::Query qw(query);
use FS::UID qw(adminsuidsetup); #datasrc
use FS::Record qw(qsearch qsearchs);
use FS::svc_acct;
use FS::part_svc;

my $user = shift or die &usage;
adminsuidsetup $user;

#push @FS::svc_acct::shells, qw(/bin/sync /sbin/shutdown /bin/halt /sbin/halt); #others?

$FS::svc_Common::noexport_hack = 1;

###

%part_svc=map { $_->svcpart, $_ } qsearch('part_svc',{'svcdb'=>'svc_acct'});

die "No services with svcdb svc_acct!\n" unless %part_svc;

print "\n\n", &menu_svc, "\n", <<END;
Enter part number to import.
END
my $sqlradius_svcpart = &getpart;

my $datasrc = &getvalue("\n\nEnter the DBI datasource:");
my $db_user = &getvalue("\n\nEnter the database user:");
my $db_pass = &getvalue("\n\nEnter the database password:");

sub menu_svc {
  ( join "\n", map "$_: ".$part_svc{$_}->svc, sort keys %part_svc ). "\n";
}
sub getpart {
  $^W=0; # Term::Query isn't -w-safe
  my $return = query "Enter part number:", 'irk', [ keys %part_svc ];
  $^W=1;
  $return;
}
sub getvalue {
  my $prompt = shift;
  $^W=0; # Term::Query isn't -w-safe
  my $return = query $prompt, '';
  $^W=1;
  $return;
}

print "\n\n";

###

my $dbh = DBI->connect( $datasrc, $db_user, $db_pass )
  or die $DBI::errstr;

my $sth = $dbh->prepare('SELECT DISTINCT UserName FROM radcheck')
  or die $dbh->errstr;
$sth->execute or die $sth->errstr;

my $row;
while ( defined ( $row = $sth->fetchrow_arrayref ) ) {
  my( $username ) = @$row;

  my( $password, $group ) = ( '', '', '' );

  my $rc_sth = $dbh->prepare(
    'SELECT Attribute, Value'.
    '  FROM radcheck'.
    '  WHERE UserName = ?'
  ) or die $dbh->errstr;
  $rc_sth->execute($username) or die $rc_sth->errstr;

  foreach my $rc_row ( @{$rc_sth->fetchall_arrayref} ) {
    my($attribute, $value) = @$rc_row;
    if ( $attribute =~ /^((Crypt|User)-)?Password$/ ) {
      $password = $value unless $password && !$1;
    } else {
      #handle other params!
    }
  }

  my @svc_acct = grep { $_->cust_svc->svcpart == $sqlradius_svcpart } 
                 qsearch('svc_acct', { 'username' => $username, } );

  #print "$r_username / $realm: $password / $finger: ";
  print "$username: $password: ";
  if ( scalar(@svc_acct) == 0 ) {
    print "not found\n";
    next;
  } elsif ( scalar(@svc_acct) > 1 ) {
    print "multiple matches found?!?!\n";
    next;
  } else {
    #print "correcting password and name\n";
    print "correcting password\n";
  }

  my $svc_acct = $svc_acct[0];
  #my $new = new FS::svc_acct { $svc_acct->hash, '_password' => $password, 'finger' => $finger };
  my $new = new FS::svc_acct { $svc_acct->hash, '_password' => $password };
  my $error = $new->replace($svc_acct);
  #my $error = $new->check;
  die "$username: $error" if $error;

}

sub usage {
  die "Usage:\n\n  sqlradius-norealm.reimport user\n";
}

