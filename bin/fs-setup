#!/usr/bin/perl -Tw
#
# $Id: fs-setup,v 1.37.2.1 2001-08-08 17:45:35 jeff Exp $
#
# ivan@sisd.com 97-nov-8,9
#
# agent_type and type_pkgs added.
# (index need to be declared, & primary keys shoudln't have mysql syntax)
# ivan@sisd.com 97-nov-13
#
# pulled modified version back out of register.cgi ivan@sisd.com 98-feb-21
#
# removed extraneous sample data ivan@sisd.com 98-mar-23
#
# gained the big hash from dbdef.pm, dbdef.pm usage rewrite ivan@sisd.com
# 98-apr-19 - 98-may-11 plus
#
# finished up ivan@sisd.com 98-jun-1
#
# part_svc fields are all forced NULL, not the opposite
# hmm: also are forced varchar($char_d) as fixed '0' for things like
# uid is Not Good.  will this break anything else?
# ivan@sisd.com 98-jun-29
#
# ss is 11 chars ivan@sisd.com 98-jul-20
#
# setup of arbitrary radius fields ivan@sisd.com 98-aug-9
#
# ouch, removed index on company name that wasn't supposed to be there
# ivan@sisd.com 98-sep-4
#
# fix radius attributes ivan@sisd.com 98-sep-27
#
# $Log: fs-setup,v $
# Revision 1.37.2.1  2001-08-08 17:45:35  jeff
# initial vpopmail support
#
# Revision 1.2  2001/08/07 22:05:42  jeff
#
#
#   Initial vpopmail changes
#
# Revision 1.1.1.1  2001/07/17 18:08:43  jeff
# Import of Freeside 1.3.1 pre
#
# Revision 1.37  2001/06/03 14:16:11  ivan
# allow empty refund reasons
#
# Revision 1.36  2001/04/15 12:56:31  ivan
# s/dbdef/DBIx::DBSchema/
#
# Revision 1.35  2001/04/15 09:36:43  ivan
# http://www.sisd.com/freeside/list-archive/msg01450.html
#
# Revision 1.34  2001/04/09 23:05:16  ivan
# Transactions Part I!!!
#
# Revision 1.33  2001/02/03 14:03:50  ivan
# time-based prepaid cards, session monitor.  woop!
#
# Revision 1.32  2000/12/04 00:13:02  ivan
# fix nas.last type
#
# Revision 1.31  2000/12/01 18:34:53  ivan
# another tyop
#
# Revision 1.30  2000/12/01 18:33:32  ivan
# tyop
#
# Revision 1.29  2000/11/07 15:00:37  ivan
# session monitor
#
# Revision 1.28  2000/10/30 10:47:26  ivan
# nas.last can't be defined NULL if indexed
#
# Revision 1.26  2000/07/06 08:57:27  ivan
# support for radius check attributes (except importing).  poorly documented.
#
# Revision 1.25  2000/06/29 12:00:49  ivan
# support for pre-encrypted md5 passwords.
#
# Revision 1.24  2000/03/02 07:44:07  ivan
# typo forgot closing '
#
# Revision 1.23  2000/02/03 05:16:52  ivan
# beginning of DNS and Apache support
#
# Revision 1.22  2000/01/31 05:22:23  ivan
# prepaid "internet cards"
#
# Revision 1.21  2000/01/30 06:03:26  ivan
# postgres 6.5 finally supports decimal(10,2)
#
# Revision 1.20  2000/01/28 22:53:33  ivan
# track full phone number
#
# Revision 1.19  1999/07/29 08:50:35  ivan
# wrong type for cust_pay_batch.exp
#
# Revision 1.18  1999/04/15 22:46:30  ivan
# TT isn't a state!
#
# Revision 1.17  1999/04/14 07:58:39  ivan
# export getsecrets from FS::UID instead of calling it explicitly
#
# Revision 1.16  1999/02/28 19:44:16  ivan
# constructors s/create/new/ pointed out by "Bao C. Ha" <bao@hacom.net>
#
# Revision 1.15  1999/02/27 21:06:21  ivan
# cust_main.paydate should be varchar(10), not @date_type ; problem reported
# by Ben Leibig <leibig@colorado.edu>
#
# Revision 1.14  1999/02/07 09:59:14  ivan
# more mod_perl fixes, and bugfixes Peter Wemm sent via email
#
# Revision 1.13  1999/02/04 06:09:23  ivan
# add AU provences
#
# Revision 1.12  1999/02/03 10:42:27  ivan
# *** empty log message ***
#
# Revision 1.11  1999/01/17 03:11:52  ivan
# remove preliminary completehost changes
#
# Revision 1.10  1998/12/16 06:05:38  ivan
# add table cust_main_invoice
#
# Revision 1.9  1998/12/15 04:36:29  ivan
# s/croak/die/; #oops
#
# Revision 1.8  1998/12/15 04:33:27  ivan
# dies if it isn't running as the freeside user
#
# Revision 1.7  1998/11/18 09:01:31  ivan
# i18n! i18n!
#
# Revision 1.6  1998/11/15 13:18:02  ivan
# remove debugging
#
# Revision 1.5  1998/11/15 09:43:03  ivan
# update for new config file syntax, new adminsuidsetup
#
# Revision 1.4  1998/10/22 15:51:23  ivan
# also varchar with no length specified - postgresql fix broke mysql.
#
# Revision 1.3  1998/10/22 15:46:28  ivan
# now smallint is illegal, so remove that too.
#

#to delay loading dbdef until we're ready
BEGIN { $FS::Record::setup_hack = 1; }

use strict;
use DBI;
use DBIx::DBSchema;
use DBIx::DBSchema::Table;
use DBIx::DBSchema::Column;
use DBIx::DBSchema::ColGroup::Unique;
use DBIx::DBSchema::ColGroup::Index;
use FS::UID qw(adminsuidsetup datasrc checkeuid getsecrets);
use FS::Record;
use FS::cust_main_county;

die "Not running uid freeside!" unless checkeuid();

my $user = shift or die &usage;
getsecrets($user);

#needs to match FS::Record
my($dbdef_file) = "/usr/local/etc/freeside/dbdef.". datasrc;

###

print "\nEnter the maximum username length: ";
my($username_len)=&getvalue;

print "\n\n", <<END, ":";
Freeside tracks the RADIUS attributes User-Name, check attribute Password and
reply attribute Framed-IP-Address for each user.  You can specify additional
check and reply attributes.  First enter any additional RADIUS check attributes
you need to track for each user, separated by whitespace.
END
my @check_attributes = map { s/\-/_/g; $_; } split(" ",&getvalue);

print "\n\n", <<END, ":";
Now enter any additional reply attributes you need to track for each user,
separated by whitespace.
END
my @attributes = map { s/\-/_/g; $_; } split(" ",&getvalue);

sub getvalue {
  my($x)=scalar(<STDIN>);
  chop $x;
  $x;
}

###

my($char_d) = 80; #default maxlength for text fields

#my(@date_type)  = ( 'timestamp', '', ''     );
my(@date_type)  = ( 'int', 'NULL', ''     );
my(@perl_type) = ( 'varchar', 'NULL', 255  ); 
my @money_type = ( 'decimal',   '', '10,2' );

###
# create a dbdef object from the old data structure
###

my(%tables)=&tables_hash_hack;

#turn it into objects
my($dbdef) = new DBIx::DBSchema ( map {  
  my(@columns);
  while (@{$tables{$_}{'columns'}}) {
    my($name,$type,$null,$length)=splice @{$tables{$_}{'columns'}}, 0, 4;
    push @columns, new DBIx::DBSchema::Column ( $name,$type,$null,$length );
  }
  DBIx::DBSchema::Table->new(
    $_,
    $tables{$_}{'primary_key'},
    DBIx::DBSchema::ColGroup::Unique->new($tables{$_}{'unique'}),
    DBIx::DBSchema::ColGroup::Index->new($tables{$_}{'index'}),
    @columns,
  );
} (keys %tables) );

#add radius attributes to svc_acct

my($svc_acct)=$dbdef->table('svc_acct');

my($attribute);
foreach $attribute (@attributes) {
  $svc_acct->addcolumn ( new DBIx::DBSchema::Column (
    'radius_'. $attribute,
    'varchar',
    'NULL',
    $char_d,
  ));
}

foreach $attribute (@check_attributes) {
  $svc_acct->addcolumn( new DBIx::DBSchema::Column (
    'rc_'. $attribute,
    'varchar',
    'NULL',
    $char_d,
  ));
}

#make part_svc table (but now as object)

my($part_svc)=$dbdef->table('part_svc');

#because of svc_acct_pop
#foreach (grep /^svc_/, $dbdef->tables) { 
#foreach (qw(svc_acct svc_acct_sm svc_charge svc_domain svc_wo)) {
foreach (qw(svc_acct svc_acct_sm svc_domain svc_forward svc_www)) {
  my($table)=$dbdef->table($_);
  my($col);
  foreach $col ( $table->columns ) {
    next if $col =~ /^svcnum$/;
    $part_svc->addcolumn( new DBIx::DBSchema::Column (
      $table->name. '__' . $table->column($col)->name,
      'varchar', #$table->column($col)->type, 
      'NULL',
      $char_d, #$table->column($col)->length,
    ));
    $part_svc->addcolumn ( new DBIx::DBSchema::Column (
      $table->name. '__'. $table->column($col)->name . "_flag",
      'char',
      'NULL',
      1,
    ));
  }
}

#important
$dbdef->save($dbdef_file);
&FS::Record::reload_dbdef($dbdef_file);

###
# create 'em
###

my($dbh)=adminsuidsetup $user;

#create tables
$|=1;

my @sql = $dbdef->sql($dbh);
foreach my $statement ( $dbdef->sql($dbh) ) {
  $dbh->do( $statement )
    or die "CREATE error: ",$dbh->errstr, "\ndoing statement: $statement";
}

#not really sample data (and shouldn't default to US)

#cust_main_county

#USPS state codes
foreach ( qw(
AL AK AS AZ AR CA CO CT DC DE FM FL GA GU HI ID IL IN IA KS KY LA
ME MH MD MA MI MN MS MO MT NC ND NE NH NJ NM NV NY MP OH OK OR PA PW PR RI 
SC SD TN TX UT VT VI VA WA WV WI WY AE AA AP
) ) {
  my($cust_main_county)=new FS::cust_main_county({
    'state' => $_,
    'tax'   => 0,
    'country' => 'US',
  });  
  my($error);
  $error=$cust_main_county->insert;
  die $error if $error;
}

#AU "offical" state codes ala mark.williamson@ebbs.com.au (Mark Williamson)
foreach ( qw(
VIC NSW NT QLD TAS ACT WA SA
) ) {
  my($cust_main_county)=new FS::cust_main_county({
    'state' => $_,
    'tax'   => 0,
    'country' => 'AU',
  });  
  my($error);
  $error=$cust_main_county->insert;
  die $error if $error;
}

#ISO 2-letter country codes (same as country TLDs) except US and AU
foreach ( qw(
AF AL DZ AS AD AO AI AQ AG AR AM AW AT AZ BS BH BD BB BY BE BZ BJ BM BT BO
BA BW BV BR IO BN BG BF BI KH CM CA CV KY CF TD CL CN CX CC CO KM CG CK CR CI
HR CU CY CZ DK DJ DM DO TP EC EG SV GQ ER EE ET FK FO FJ FI FR FX GF PF TF GA
GM GE DE GH GI GR GL GD GP GU GT GN GW GY HT HM HN HK HU IS IN ID IR IQ IE IL
IT JM JP JO KZ KE KI KP KR KW KG LA LV LB LS LR LY LI LT LU MO MK MG MW MY MV
ML MT MH MQ MR MU YT MX FM MD MC MN MS MA MZ MM NA NR NP NL AN NC NZ NI NE NG
NU NF MP NO OM PK PW PA PG PY PE PH PN PL PT PR QA RE RO RU RW KN LC VC WS SM
ST SA SN SC SL SG SK SI SB SO ZA GS ES LK SH PM SD SR SJ SZ SE CH SY TW TJ TZ
TH TG TK TO TT TN TR TM TC TV UG UA AE GB UM UY UZ VU VA VE VN VG VI WF EH
YE YU ZR ZM ZW
) ) {
  my($cust_main_county)=new FS::cust_main_county({
    'tax'   => 0,
    'country' => $_,
  });  
  my($error);
  $error=$cust_main_county->insert;
  die $error if $error;
}

$dbh->disconnect or die $dbh->errstr;

print "Freeside database initialized sucessfully\n";

sub usage {
  die "Usage:\n  fs-setup user\n"; 
}

###
# Now it becomes an object.  much better.
###
sub tables_hash_hack {

  #note that s/(date|change)/_$1/; to avoid keyword conflict.
  #put a kludge in FS::Record to catch this or? (pry need some date-handling
  #stuff anyway also)

  my(%tables)=( #yech.}

    'agent' => {
      'columns' => [
        'agentnum', 'int',            '',     '',
        'agent',    'varchar',           '',     $char_d,
        'typenum',  'int',            '',     '',
        'freq',     'int',       'NULL', '',
        'prog',     @perl_type,
      ],
      'primary_key' => 'agentnum',
      'unique' => [ [] ],
      'index' => [ ['typenum'] ],
    },

    'agent_type' => {
      'columns' => [
        'typenum',   'int',  '', '',
        'atype',     'varchar', '', $char_d,
      ],
      'primary_key' => 'typenum',
      'unique' => [ [] ],
      'index' => [ [] ],
    },

    'type_pkgs' => {
      'columns' => [
        'typenum',   'int',  '', '',
        'pkgpart',   'int',  '', '',
      ],
      'primary_key' => '',
      'unique' => [ ['typenum', 'pkgpart'] ],
      'index' => [ ['typenum'] ],
    },

    'cust_bill' => {
      'columns' => [
        'invnum',    'int',  '', '',
        'custnum',   'int',  '', '',
        '_date',     @date_type,
        'charged',   @money_type,
        'printed',   'int',  '', '',
      ],
      'primary_key' => 'invnum',
      'unique' => [ [] ],
      'index' => [ ['custnum'] ],
    },

    'cust_bill_pkg' => {
      'columns' => [
        'pkgnum',  'int', '', '',
        'invnum',  'int', '', '',
        'setup',   @money_type,
        'recur',   @money_type,
        'sdate',   @date_type,
        'edate',   @date_type,
      ],
      'primary_key' => '',
      'unique' => [ ['pkgnum', 'invnum'] ],
      'index' => [ ['invnum'] ],
    },

    'cust_credit' => {
      'columns' => [
        'crednum',  'int', '', '',
        'custnum',  'int', '', '',
        '_date',    @date_type,
        'amount',   @money_type,
        'otaker',   'varchar', '', 8,
        'reason',   'varchar', 'NULL', 255,
      ],
      'primary_key' => 'crednum',
      'unique' => [ [] ],
      'index' => [ ['custnum'] ],
    },

    'cust_main' => {
      'columns' => [
        'custnum',  'int',  '',     '',
        'agentnum', 'int',  '',     '',
#        'titlenum', 'int',  'NULL',   '',
        'last',     'varchar', '',     $char_d,
#        'middle',   'varchar', 'NULL', $char_d,
        'first',    'varchar', '',     $char_d,
        'ss',       'char', 'NULL', 11,
        'company',  'varchar', 'NULL', $char_d,
        'address1', 'varchar', '',     $char_d,
        'address2', 'varchar', 'NULL', $char_d,
        'city',     'varchar', '',     $char_d,
        'county',   'varchar', 'NULL', $char_d,
        'state',    'varchar', 'NULL', $char_d,
        'zip',      'varchar', '',     10,
        'country',  'char', '',     2,
        'daytime',  'varchar', 'NULL', 20,
        'night',    'varchar', 'NULL', 20,
        'fax',      'varchar', 'NULL', 12,
        'payby',    'char', '',     4,
        'payinfo',  'varchar', 'NULL', 16,
        #'paydate',  @date_type,
        'paydate',  'varchar', 'NULL', 10,
        'payname',  'varchar', 'NULL', $char_d,
        'tax',      'char', 'NULL', 1,
        'otaker',   'varchar', '',     8,
        'refnum',   'int',  '',     '',
      ],
      'primary_key' => 'custnum',
      'unique' => [ [] ],
      #'index' => [ ['last'], ['company'] ],
      'index' => [ ['last'], ],
    },

    'cust_main_invoice' => {
      'columns' => [
        'destnum',  'int',  '',     '',
        'custnum',  'int',  '',     '',
        'dest',     'varchar', '',  $char_d,
      ],
      'primary_key' => 'destnum',
      'unique' => [ [] ],
      'index' => [ ['custnum'], ],
    },

    'cust_main_county' => { #county+state+country are checked off the
                            #cust_main_county for validation and to provide
                            # a tax rate.
      'columns' => [
        'taxnum',   'int',   '',    '',
        'state',    'varchar',  'NULL',    $char_d,
        'county',   'varchar',  'NULL',    $char_d,
        'country',  'char',  '', 2, 
        'tax',      'real',  '',    '', #tax %
      ],
      'primary_key' => 'taxnum',
      'unique' => [ [] ],
  #    'unique' => [ ['taxnum'], ['state', 'county'] ],
      'index' => [ [] ],
    },

    'cust_pay' => {
      'columns' => [
        'paynum',   'int',    '',   '',
        'invnum',   'int',    '',   '',
        'paid',     @money_type,
        '_date',    @date_type,
        'payby',    'char',   '',     4, # CARD/BILL/COMP, should be index into
                                         # payment type table.
        'payinfo',  'varchar',   'NULL', 16,  #see cust_main above
        'paybatch', 'varchar',   'NULL', $char_d, #for auditing purposes.
      ],
      'primary_key' => 'paynum',
      'unique' => [ [] ],
      'index' => [ ['invnum'] ],
    },

    'cust_pay_batch' => { #what's this used for again?  list of customers
                          #in current CARD batch? (necessarily CARD?)
      'columns' => [
        'invnum',   'int',    '',   '',
        'custnum',   'int',    '',   '',
        'last',     'varchar', '',     $char_d,
        'first',    'varchar', '',     $char_d,
        'address1', 'varchar', '',     $char_d,
        'address2', 'varchar', 'NULL', $char_d,
        'city',     'varchar', '',     $char_d,
        'state',    'varchar', '',     $char_d,
        'zip',      'varchar', '',     10,
        'country',  'char', '',     2,
        'trancode', 'int', '', '',
        'cardnum',  'varchar', '',     16,
        #'exp',      @date_type,
        'exp',      'varchar', '',     11,
        'payname',  'varchar', 'NULL', $char_d,
        'amount',   @money_type,
      ],
      'primary_key' => '',
      'unique' => [ [] ],
      'index' => [ ['invnum'], ['custnum'] ],
    },

    'cust_pkg' => {
      'columns' => [
        'pkgnum',    'int',    '',   '',
        'custnum',   'int',    '',   '',
        'pkgpart',   'int',    '',   '',
        'otaker',    'varchar', '', 8,
        'setup',     @date_type,
        'bill',      @date_type,
        'susp',      @date_type,
        'cancel',    @date_type,
        'expire',    @date_type,
      ],
      'primary_key' => 'pkgnum',
      'unique' => [ [] ],
      'index' => [ ['custnum'] ],
    },

    'cust_refund' => {
      'columns' => [
        'refundnum',    'int',    '',   '',
        'crednum',      'int',    '',   '',
        '_date',        @date_type,
        'refund',       @money_type,
        'otaker',       'varchar',   '',   8,
        'reason',       'varchar',   '',   $char_d,
        'payby',        'char',   '',     4, # CARD/BILL/COMP, should be index
                                             # into payment type table.
        'payinfo',      'varchar',   'NULL', 16,  #see cust_main above
      ],
      'primary_key' => 'refundnum',
      'unique' => [ [] ],
      'index' => [ ['crednum'] ],
    },

    'cust_svc' => {
      'columns' => [
        'svcnum',    'int',    '',   '',
        'pkgnum',    'int',    'NULL',   '',
        'svcpart',   'int',    '',   '',
      ],
      'primary_key' => 'svcnum',
      'unique' => [ [] ],
      'index' => [ ['svcnum'], ['pkgnum'], ['svcpart'] ],
    },

    'part_pkg' => {
      'columns' => [
        'pkgpart',    'int',    '',   '',
        'pkg',        'varchar',   '',   $char_d,
        'comment',    'varchar',   '',   $char_d,
        'setup',      @perl_type,
        'freq',       'int', '', '',  #billing frequency (months)
        'recur',      @perl_type,
      ],
      'primary_key' => 'pkgpart',
      'unique' => [ [] ],
      'index' => [ [] ],
    },

#    'part_title' => {
#      'columns' => [
#        'titlenum',   'int',    '',   '',
#        'title',      'varchar',   '',   $char_d,
#      ],
#      'primary_key' => 'titlenum',
#      'unique' => [ [] ],
#      'index' => [ [] ],
#    },

    'pkg_svc' => {
      'columns' => [
        'pkgpart',    'int',    '',   '',
        'svcpart',    'int',    '',   '',
        'quantity',   'int',    '',   '',
      ],
      'primary_key' => '',
      'unique' => [ ['pkgpart', 'svcpart'] ],
      'index' => [ ['pkgpart'] ],
    },

    'part_referral' => {
      'columns' => [
        'refnum',   'int',    '',   '',
        'referral', 'varchar',   '',   $char_d,
      ],
      'primary_key' => 'refnum',
      'unique' => [ [] ],
      'index' => [ [] ],
    },

    'part_svc' => {
      'columns' => [
        'svcpart',    'int',    '',   '',
        'svc',        'varchar',   '',   $char_d,
        'svcdb',      'varchar',   '',   $char_d,
      ],
      'primary_key' => 'svcpart',
      'unique' => [ [] ],
      'index' => [ [] ],
    },

    #(this should be renamed to part_pop)
    'svc_acct_pop' => {
      'columns' => [
        'popnum',    'int',    '',   '',
        'city',      'varchar',   '',   $char_d,
        'state',     'varchar',   '',   $char_d,
        'ac',        'char',   '',   3,
        'exch',      'char',   '',   3,
        'loc',       'char',   'NULL',   4, #NULL for legacy purposes
      ],
      'primary_key' => 'popnum',
      'unique' => [ [] ],
      'index' => [ [] ],
    },

    'svc_acct' => {
      'columns' => [
        'svcnum',    'int',    '',   '',
        'username',  'varchar',   '',   $username_len, #unique (& remove dup code)
        '_password', 'varchar',   '',   50, #13 for encryped pw's plus ' *SUSPENDED* (mp5 passwords can be 34)
        'popnum',    'int',    'NULL',   '',
        'uid',       'int', 'NULL',   '',
        'gid',       'int', 'NULL',   '',
        'finger',    'varchar',   'NULL',   $char_d,
        'dir',       'varchar',   'NULL',   $char_d,
        'shell',     'varchar',   'NULL',   $char_d,
        'quota',     'varchar',   'NULL',   $char_d,
        'slipip',    'varchar',   'NULL',   15, #four TINYINTs, bah.
        'seconds',   'int', 'NULL',   '', #uhhhh
        'domsvc',    'int', '',   '',
      ],
      'primary_key' => 'svcnum',
      'unique' => [ [] ],
      'index' => [ ['username'], ['domsvc'] ],
    },

    'svc_acct_sm' => {
      'columns' => [
        'svcnum',    'int',    '',   '',
        'domsvc',    'int',    '',   '',
        'domuid',    'int', '',   '',
        'domuser',   'varchar',   '',   $char_d,
      ],
      'primary_key' => 'svcnum',
      'unique' => [ [] ],
      'index' => [ ['domsvc'], ['domuid'] ], 
    },

    #'svc_charge' => {
    #  'columns' => [
    #    'svcnum',    'int',    '',   '',
    #    'amount',    @money_type,
    #  ],
    #  'primary_key' => 'svcnum',
    #  'unique' => [ [] ],
    #  'index' => [ [] ],
    #},

    'svc_domain' => {
      'columns' => [
        'svcnum',    'int',    '',   '',
        'domain',    'varchar',    '',   $char_d,
        'catchall',  'int',    '',    '',
      ],
      'primary_key' => 'svcnum',
      'unique' => [ ['domain'] ],
      'index' => [ [] ],
    },

    'domain_record' => {
      'columns' => [
        'recnum',    'int',     '',  '',
        'svcnum',    'int',     '',  '',
        'reczone',   'varchar', '',  $char_d,
        'recaf',     'char',    '',  2,
        'rectype',   'char',    '',  5,
        'recdata',   'varchar', '',  $char_d,
      ],
      'primary_key' => 'recnum',
      'unique'      => [ [] ],
      'index'       => [ ['svcnum'] ],
    },

    'svc_forward' => {
      'columns' => [
        'svcnum',   'int',    '',  '',
        'srcsvc',   'int',    '',  '',
        'dstsvc',   'int',    '',  '',
        'dst',      'varchar',    'NULL',  $char_d,
      ],
      'primary_key' => 'svcnum',
      'unique'      => [ [] ],
      'index'       => [ ['srcsvc'], ['dstsvc'] ],
    },

    'svc_www' => {
      'columns' => [
        'svcnum',   'int',    '',  '',
        'recnum',   'int',    '',  '',
        'usersvc',  'int',    '',  '',
      ],
      'primary_key' => 'svcnum',
      'unique'      => [ [] ],
      'index'       => [ [] ],
    },

    #'svc_wo' => {
    #  'columns' => [
    #    'svcnum',    'int',    '',   '',
    #    'svcnum',    'int',    '',   '',
    #    'svcnum',    'int',    '',   '',
    #    'worker',    'varchar',   '',   $char_d,
    #    '_date',     @date_type,
    #  ],
    #  'primary_key' => 'svcnum',
    #  'unique' => [ [] ],
    #  'index' => [ [] ],
    #},

    'prepay_credit' => {
      'columns' => [
        'prepaynum',   'int',     '',   '',
        'identifier',  'varchar', '', $char_d,
        'amount',      @money_type,
        'seconds',     'int',     'NULL', '',
      ],
      'primary_key' => 'prepaynum',
      'unique'      => [ ['identifier'] ],
      'index'       => [ [] ],
    },

    'port' => {
      'columns' => [
        'portnum',  'int',     '',   '',
        'ip',       'varchar', 'NULL', 15,
        'nasport',  'int',     'NULL', '',
        'nasnum',   'int',     '',   '',
      ],
      'primary_key' => 'portnum',
      'unique'      => [],
      'index'       => [],
    },

    'nas' => {
      'columns' => [
        'nasnum',   'int',     '',    '',
        'nas',      'varchar', '',    $char_d,
        'nasip',    'varchar', '',    15,
        'nasfqdn',  'varchar', '',    $char_d,
        'last',     'int',     '',    '',
      ],
      'primary_key' => 'nasnum',
      'unique'      => [ [ 'nas' ], [ 'nasip' ] ],
      'index'       => [ [ 'last' ] ],
    },

    'session' => {
      'columns' => [
        'sessionnum', 'int',       '',   '',
        'portnum',    'int',       '',   '',
        'svcnum',     'int',       '',   '',
        'login',      @date_type,
        'logout',     @date_type,
      ],
      'primary_key' => 'sessionnum',
      'unique'      => [],
      'index'       => [ [ 'portnum' ] ],
    },

  );

  %tables;

}

